1. API 문서를 읽는 경우에 가장 중요하게 봐야할 4가지를 쓰시오.

2. rwxr--r-- 의 의미를 숫자로 표시하시오. ( *** )
3. *rwxrw-rw- 에서 *의 자리에 표시되는 d/l/-의 의미를 각각 쓰시오. (3개)
4. rw-r--r-- 에서 others에 실행 권한(x)을 주고 싶다. chmod 명령어를 이용해 권한을 주는 3가지 방법을 쓰시오.
(참고 - 약자는 owner(u), group(g), others(o)이고, 표현 방법은 숫자, +/-, = 이렇게 3가지)

5. 다음은 chmod 함수에 대한 설명이다.
#include <sys/stat.h>
int chmod(const char *pathname, mode_t mode);

The chmod() system call change a files mode bits.  (The
file mode consists of the file permission bits plus the set-user-ID,
set-group-ID, and sticky bits.)

* chmod() changes the mode of the file specified whose pathname is
given in pathname, which is dereferenced if it is a symbolic link.

The new file mode is specified in mode, which is a bit mask created
by ORing together zero or more of the following:

S_IRUSR  (00400)  read by owner
S_IWUSR  (00200)  write by owner
S_IXUSR  (00100)  execute/search by owner ("search" applies for
                 directories, and means that entries within the
                 directory can be accessed)

S_IRGRP  (00040)  read by group
S_IWGRP  (00020)  write by group
S_IXGRP  (00010)  execute/search by group

S_IROTH  (00004)  read by others
S_IWOTH  (00002)  write by others
S_IXOTH  (00001)  execute/search by others

아래와 같은 C 코드 실행 후, a라는 파일의 권한을 숫자로 표시하시오 ( *** )
chmod("a", S_IRUSR | S_IXGRP| S_IRGRP | S_IWOTH);

6. 특정 유저에게 umask를 통해서 기본 권한을 설정하였다. 새로운 파일과 폴더를 생성한 결과가 아래와 같은 경우,
umask가 어떻게 설정되어 있는 상태인지 쓰시오.
 - 새 파일 생성시 = 644
 - 새 폴더 생성시 = 755
예) umask ***

7. set-user-bit가 설정된 프로그램을 실행시 누구의 권한으로 작동이 되는가? ( 실행하는 사람(나), root, 프로그램 소유자 )

8. passwd / sudo apt-get install gcc 이 두 명령어를 각각 실행하였을 때의 passwd/apt-get 프로그램이 받는 real user, effective user을 각각 쓰시오. (apt-get은 앞에 sudo가 있다는 점 유의)
          real user      /      effective user
passwd =
apt-get =

9. ln -s a b 라는 명령어의 의미와, b를 지우는 경우 a의 상태가 어떻게 되는지 쓰시오. (하드링크 또는 소프트링크 및 원본이라는 단어를 포함하여 설명하시오)

10. 아래는 ls -al의 결과이다.
-rwxr-wr-w 10 bob bob 172 Feb  2 00:01 a
이후 "ln a c" 명령어(하드링크, 소프트링크 구분)를 실행하는 경우에 a의 ls -al 결과에서 변경되는 부분이 어디인지 그리고 어떻게 변경되는지 쓰시오.

11. 하드링크의 특징에 대해 설명하시오. (원본 삭제시, 파일 시스템 이라는 단어를 포함하여 설명)

12. a.out 이라는 프로그램을 아래와 같이 작성하였다.
#include <stdio.h>
int main (int argc, char* argv[]) {
    int i;
    printf("%d\n", argc);
    for (i=0; i<argc; i++) {
        printf("argv[%d]: %s\n", i, argv[i]);
    }
    return 82;
}
쉘에서 ./a.out a b 1 2 love 를 입력하였을 경우 그 결과를 그대로 쓰시오.
13. 위 프로그램 작성 후 터미널에서 echo $?를 입력하였을 경우 그 결과를 쓰시오.

14. exit(); 과 _Exit(); 함수의 차이점에 대해서 설명하시오.

15. b.out이라는 프로그램을 아래와 같이 작성하였다.
void m1(void) { printf("1\n"); }
void m2(void) { printf("2\n"); }

int main(void) {
    atexit(m2);
    atexit(m2);
    atexit(m1);
    printf("done\n");

    return 0;
}
위 프로그램의 실행 결과를 그대로 쓰시오.

16. program은 아래과 같은 의존성을 가지고 있다.
          |------> main.c ------> main.o-----------------------|
          |                                                    |
lib.h ----|------> bill.c ------> bill.o ---|                  | ---> program
          |                                 | ---> libfoo.a ---|
          |------> fred.c ------> fred.o ---|

a) fred.c 변경시 재 생성되어야 하는 파일들은? ( 1~3개 )
b) 아래 메이크 파일의 공란에 필요한 파일 이름들을 적으시오.
program : (_________________)
    gcc –o program main.o libfoo.a
libfoo.a: (________________)
    ar crv libfoo.a (_______________) 
main.o : lib.h main.c
    gcc –c main.c
bill.o : (______________)
    gcc –c bill.c
fred.o : (_____________)
gcc –c fred.c

17. malloc과 alloca 함수의 차이점 2가지를 설명하시오.

18. 아래와 같이 file1, file2, file3이 있다.
~/test$ cat file1
file1
~/test$ cat file2
file2
~/test$ cat file3
file3
이 때 아래 명령어를 실행할 경우의 출력 결과를 그대로 쓰시오.
cat file3 | cat file1 /dev/fd/0 file2 > /dev/fd/1

19. 프로그램의 모든 code와 data 영역을 공유하는 것은 프로세스인가 쓰레드인가?

20. 프로세스가 생성되고, 종료되는 비용은 쓰레드보다 싸다(효율적이다) -- O / X

21. 아래와 같은 코드가 있다.
#include <stdio.h>
#include <pthread.h>
pthread_t ntid[8];

/////////////////// HERE

void * thr_fn(void *arg) {
    int count=0; // COUNT_VARIABLE
    int i;
    for (i=0; i<10000; i++)
        count++;

    return((void *)count);
}

int main(void) {
    int i;
    void* res;
    for (i=0; i<2; i++)
        pthread_create(&ntid[i], NULL, thr_fn,NULL);

    for (i=0; i<2; i++) {
        pthread_join(ntid[i], &res);
        printf("count=%d\n", (int)res);
    }

    return 0;
}

위 코드를 실행한 결과를 쓰시오.
22. 위 코드에서 COUNT_VARIABLE이 있는 줄을 HERE 위치로 옮기면 결과는 어떻게 되는지 예측하시오.

23. 아래와 같은 코드가 있다.
#include <stdio.h>
#include <pthread.h>
pthread_t ntid[8];

struct SharedData
{
    int count;
    // (1)
    pthread_mutex_t lock;
    // (2)
};

void * thr_fn(void *arg){
    struct SharedData* pd=(struct SharedData*) arg;
    int i;
    // (3)
    for (i=0; i<10000; i++) {
        // (4)
        pd->count = pd->count + 1;
        // (5)
    }
    // (6)
    return((void *)0);
}

int main(void){
    struct SharedData d;
    struct SharedData *pd=&d;
    int i;
    d.count=0;
    // (7)
    for (i=0; i<8; i++) {
        // (8)
        pthread_create(&ntid[i], NULL, thr_fn, (void*)pd);
        // (9)
    }
    for (i=0; i<8; i++) {
        // (10)
        pthread_join(ntid[i], NULL);
        // (11)
    }
    // (12)
    printf("count=%d\n", d.count);
    // (13)
    return 0;
}

이 코드의 결과를 예측하시오.
24. 이 코드의 결과가 80000 을 출력하도록 보장하기 위해 아래와 같은 함수들을 추가하고자 한다.
a) 이 코드들은 어떠한 기능을 하는 것인지 간단히 설명하시오.
b) 각 함수별로 어느 위치에 추가해야하는지 각각 쓰시오.

pthread_mutex_lock(&pd->lock); ==>
pthread_mutex_unlock(&pd->lock); ==>
pthread_mutex_init(&pd->lock, NULL);  ==>

25. 아래와 같은 코드가 있다.
#include <stdio.h>
#include <pthread.h>

pthread_t ntid[8];
int count=0;

void * thr_fn(void *arg) {
    int i;
    count=count+1;
    return NULL;
}

int main(void){
    int i;
    void* res;

    for (i=0; i<2; i++)
        pthread_create(&ntid[i], NULL, thr_fn, NULL);

    printf("count=%d\n", count);
    return 0;
}

위 코드의 결과와 그 이유를 쓰시오.

26. 아래와 같은 코드가 있다.
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <pthread.h>
int counter = 0;
#define NUM_THREAD 2
pthread_mutex_t lock1;
pthread_mutex_t lock2;

void* thr_main1(void* arg) {
    puts("thread 1 start\n");
    pthread_mutex_lock(&lock1);
    sleep(1);
    pthread_mutex_lock(&lock2);
    counter++;
    sleep(1);
    pthread_mutex_unlock(&lock2);
    pthread_mutex_unlock(&lock1);

    return ((void*)1);
}

void* thr_main2(void* arg) {
    puts("thread 2 start\n");
    pthread_mutex_lock(&lock2);
    sleep(1);
    pthread_mutex_lock(&lock1);
    counter++;
    sleep(1);
    pthread_mutex_unlock(&lock1);
    pthread_mutex_unlock(&lock2);

    return ((void*)1);
}

int main (void) {
    int err, i;
    pthread_t tid[NUM_THREAD];
    void *tret;

    err = pthread_create(&tid[0], NULL, thr_main1, NULL);
    if (err != 0) exit(1);
    err = pthread_create(&tid[1], NULL, thr_main2, NULL);
    if (err != 0) exit(1);

    for (i=0; i<NUM_THREAD; i++) {
        if (pthread_join(tid[i], &tret)) exit(2);
    }
    printf("done %d!\n", counter);
    return 0;
}

이 코드의 결과를 예측하고 왜 그런지 쓰시오. 

27. 이번 멘토링에 대한 소감! (못 가르친다, 이해 안간다, 진도가 빠르다, 다음에도 다른 과목을 듣고싶다 등등...)
https://goo.gl/forms/F7elmKmboHixoEDh1 에 접속해서 남기기!
